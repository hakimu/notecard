require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe QuizzesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Quiz. As you add validations to Quiz, be sure to
  # adjust the attributes here as well.
  # let(:valid_attributes) {
  #   skip('Add a hash of attributes valid for your model')
  # }

  # let(:invalid_attributes) {
  #   skip('Add a hash of attributes invalid for your model')
  # }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # QuizsController. Be sure to keep this updated too.
  # let(:valid_session) { {} }

  describe 'GET #index' do
    context 'when there is not a user logged in' do
      it 'redirects to the root path' do
        get :index
        expect(response).to have_http_status(302)
        expect(subject).to redirect_to(root_path)
      end
    end

    context 'when there is a logged in user' do
      it 'returns all the users\' quizzes' do
        logged_in_user
        get :index
        expect(response).to have_http_status(:ok)
      end
    end
  end

  describe 'GET #show' do
    context 'when the user is logged in' do
      it 'returns a success response' do
        logged_in_user
        note = create(:note, user_id: logged_in_user)
        quiz = build(:quiz, user_id: logged_in_user)
        quiz.notes << note
        quiz.save
        get :show, params: { id: quiz.id }
        expect(response).to have_http_status(:ok)
      end

      it 'returns a 404 if the quiz does not exist' do
        current_user = create(:user)
        session[:user_id] = current_user.id
        get :show, params: { id: 99 }
        expect(response).to have_http_status(:not_found)
      end
    end
  end

  describe 'GET #new' do
    context 'when the user is logged in' do
      it 'returns a success response' do
        current_user = create(:user)
        session[:user_id] = current_user.id
        get :new, params: {}
        expect(response).to have_http_status(:ok)
      end
    end

    context 'when the user is not logged in' do
      it 'redirects to the root path' do
        get :new, params: {}
        expect(response).to have_http_status(302)
        expect(subject).to redirect_to(root_path)
      end
    end
  end

  describe 'GET #edit' do
    it 'returns a success response' do
      quiz = Quiz.create! valid_attributes
      get :edit, params: {id: quiz.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Quiz' do
        expect {
          post :create, params: {quiz: valid_attributes}, session: valid_session
        }.to change(Quiz, :count).by(1)
      end

      it 'redirects to the created quiz' do
        post :create, params: {quiz: valid_attributes}, session: valid_session
        expect(response).to redirect_to(Quiz.last)
      end
    end

    context 'with invalid params' do
      it 'returns a success response (i.e. to display the \'new\' template)' do
        post :create, params: {quiz: invalid_attributes}, session: valid_session
        expect(response).to be_successful
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) {
        skip('Add a hash of attributes valid for your model')
      }

      it 'updates the requested quiz' do
        quiz = Quiz.create! valid_attributes
        put :update, params: {id: quiz.to_param, quiz: new_attributes}, session: valid_session
        quiz.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the quiz' do
        quiz = Quiz.create! valid_attributes
        put :update, params: {id: quiz.to_param, quiz: valid_attributes}, session: valid_session
        expect(response).to redirect_to(quiz)
      end
    end

    context 'with invalid params' do
      it 'returns a success response (i.e. to display the \'edit\' template)' do
        quiz = Quiz.create! valid_attributes
        put :update, params: {id: quiz.to_param, quiz: invalid_attributes}, session: valid_session
        expect(response).to be_successful
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested quiz' do
      quiz = Quiz.create! valid_attributes
      expect {
        delete :destroy, params: {id: quiz.to_param}, session: valid_session
      }.to change(Quiz, :count).by(-1)
    end

    it 'redirects to the quizs list' do
      quiz = Quiz.create! valid_attributes
      delete :destroy, params: {id: quiz.to_param}, session: valid_session
      expect(response).to redirect_to(quizs_url)
    end
  end
  def logged_in_user
    user = create(:user)
    session[:user_id] = user.id
  end
end
